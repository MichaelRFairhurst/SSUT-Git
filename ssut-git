#!/bin/bash

##################################################################
#
# You can edit these :)
#
##################################################################

HOME=~/services/SSUT-Git/SSUT-Git
CONFIGDIR=/config
MAILCMD=mail
OUTPUT=/dev/null

##################################################################
#
# Declare dataset
#
##################################################################

emails=( ) 	#if tests fail
branches=( ) 	#branches to test
branch="" 	#current branch
commands=( ) 	#test commands

##################################################################
#
# Parse flags
#
##################################################################

testing=true
checkrepo=true
update=true
verbose=true
configs=( )

for flag in $@
do
  case $flag in
    # Use fallthrough to remove dependent operations
    -q) verbose=false;;
    -p) checkrepo=false;&
    -g) update=false;&
    -u) testing=false;;
    -c=*) configs[${#configs[@]}]=$(echo $flag | cut -b "4-");;
    -v) echo 'SSUT-Git v0.1, made by Michael Fairhurst. Copyright 2012'; exit 0;;
    *) echo 'Help:
	Troubleshooting with <-p|-g|-u>
	-p will only parse config
	-g will also check git repos
	-u will also update git branches. This is not really for troubleshooting,
		but is used to update all branches without testing them.

	Other optional commands
	-q will suppress success and status messages
	-c=<config-name> run specific configs files only (can be used multiple times)
	-v will stop execution to show version info

 	Anything else shows this help message.'
       exit 1;;
  esac
done

##################################################################
#
# Pull/diff functions
#
##################################################################

git_do ()
{
  # Abstraction for testing
  git $@
  return $?
}

. $HOME/lib

##################################################################
#
# When loading all configs
#
##################################################################

if [ ${#configs[@]} -eq 0 ]
then
  searchdir=$HOME$CONFIGDIR/*
  for file in $searchdir
  do
    $verbose && echo "Loading config $file"
    configs[${#configs[@]}]=$(basename $file)
  done
fi

##################################################################
#
# Git it done...
#
##################################################################

#
# @todo only run a single
#   config, otherwise
#   fork (see below)
#

for config in ${configs[@]}
do
  $verbose && echo "Begin $config"
  oldIFS=$IFS
  IFS=$'\n'
  configure $(cat "$HOME$CONFIGDIR/$config")
  IFS=$oldIFS
  if [ $? -eq 0 ]
  then
    run_repo
  fi
  $verbose && echo "Finished config $config"
done
$verbose && echo -e "\nComplete!"

##################################################################
# 
# Fork for threading
#
##################################################################

#
# @todo fork every config
#   by calling itself
#   with -c=proj if there
#   are multiple configs
#
